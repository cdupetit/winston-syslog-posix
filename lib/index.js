var SyslogPosix, exports, posix, util, winston;

posix = require('posix');

util = require('util');

winston = require('winston');

SyslogPosix = winston.transports.SyslogPosix = function(options) {
  if (options == null) {
    options = {};
  }
  this.name = 'SyslogPosix';
  this.level = options.level || 'debug';
  this.identity = options.identity || process.title;
  this.facility = options.facility || 'local0';
  this.unmapped = options.unmapped || 'info';
  this.showPid = options.showPid === void 0 ? true : options.showPid;
  return this.showLvl = options.showLvl === void 0 ? true : options.showLvl;
};

util.inherits(SyslogPosix, winston.Transport);

SyslogPosix.prototype.log = function(level, msg, meta, callback) {
  var maxLength, message, messages, prepend, syslogOptions, syslogSeverity;
  if (this.silent) {
    return callback(null, true);
  }
  syslogSeverity = level;
  if (level === 'trace' || level === 'debug') {
    syslogSeverity = 'debug';
  } else if (level === 'notice') {
    syslogSeverity = 'notice';
  } else if (level === 'warn' || level === 'warning') {
    syslogSeverity = 'warning';
  } else if (level === 'error') {
    syslogSeverity = 'err';
  } else if (level === 'crit' || level === 'critical') {
    syslogSeverity = 'crit';
  } else if (level === 'alert') {
    syslogSeverity = 'alert';
  } else if (level === 'fatal' || level === 'emerg') {
    syslogSeverity = 'emerg';
  } else {
    syslogSeverity = this.unmapped;
  }
  message = msg;
  prepend = '';
  if (this.showLvl === true) {
    prepend = '[' + level + '] ';
  }
  if (typeof meta === 'string') {
    message += ' ' + meta;
  } else if (meta && typeof meta === 'object' && Object.keys(meta).length > 0) {
    message += ' ' + util.inspect(meta, false, null, false);
  }
  message = message.replace(/\u001b\[(\d+(;\d+)*)?m/g, '');
  messages = [];
  maxLength = 1024 - prepend.length;
  while (message.length > maxLength) {
    messages.push(prepend + message.substring(0, maxLength));
    message = message.substring(maxLength);
  }
  messages.push(prepend + message);
  syslogOptions = {
    cons: true,
    pid: this.showPid
  };
  posix.openlog(this.identity, syslogOptions, this.facility);
  messages.forEach(function(message) {
    return posix.syslog(syslogSeverity, message);
  });
  posix.closelog();
  this.emit('logged');
  return callback(null, true);
};

module.exports = exports = SyslogPosix;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLEtBQUEsR0FBUSxPQUFBLENBQVEsT0FBUjs7QUFDUixJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBQ1AsT0FBQSxHQUFVLE9BQUEsQ0FBUSxTQUFSOztBQUVWLFdBQUEsR0FBYyxPQUFPLENBQUMsVUFBVSxDQUFDLFdBQW5CLEdBQWlDLFNBQUMsT0FBRDs7SUFBQyxVQUFVOztFQUN4RCxJQUFDLENBQUEsSUFBRCxHQUFRO0VBQ1IsSUFBQyxDQUFBLEtBQUQsR0FBUyxPQUFPLENBQUMsS0FBUixJQUFpQjtFQUMxQixJQUFDLENBQUEsUUFBRCxHQUFZLE9BQU8sQ0FBQyxRQUFSLElBQW9CLE9BQU8sQ0FBQztFQUN4QyxJQUFDLENBQUEsUUFBRCxHQUFZLE9BQU8sQ0FBQyxRQUFSLElBQW9CO0VBQ2hDLElBQUMsQ0FBQSxRQUFELEdBQVksT0FBTyxDQUFDLFFBQVIsSUFBb0I7RUFDaEMsSUFBQyxDQUFBLE9BQUQsR0FBYyxPQUFPLENBQUMsT0FBUixLQUFtQixNQUF0QixHQUFxQyxJQUFyQyxHQUErQyxPQUFPLENBQUM7U0FDbEUsSUFBQyxDQUFBLE9BQUQsR0FBYyxPQUFPLENBQUMsT0FBUixLQUFtQixNQUF0QixHQUFxQyxJQUFyQyxHQUErQyxPQUFPLENBQUM7QUFQckI7O0FBYS9DLElBQUksQ0FBQyxRQUFMLENBQWMsV0FBZCxFQUEyQixPQUFPLENBQUMsU0FBbkM7O0FBRUEsV0FBVyxDQUFBLFNBQUUsQ0FBQSxHQUFiLEdBQW1CLFNBQUMsS0FBRCxFQUFRLEdBQVIsRUFBYSxJQUFiLEVBQW1CLFFBQW5CO0FBQ2pCLE1BQUE7RUFBQSxJQUFHLElBQUMsQ0FBQSxNQUFKO0FBQ0UsV0FBTyxRQUFBLENBQVMsSUFBVCxFQUFlLElBQWYsRUFEVDs7RUFJQSxjQUFBLEdBQWlCO0VBQ2pCLElBQUcsS0FBQSxLQUFTLE9BQVQsSUFBb0IsS0FBQSxLQUFTLE9BQWhDO0lBQ0UsY0FBQSxHQUFpQixRQURuQjtHQUFBLE1BRUssSUFBRyxLQUFBLEtBQVMsUUFBWjtJQUNILGNBQUEsR0FBaUIsU0FEZDtHQUFBLE1BRUEsSUFBRyxLQUFBLEtBQVMsTUFBVCxJQUFtQixLQUFBLEtBQVMsU0FBL0I7SUFDSCxjQUFBLEdBQWlCLFVBRGQ7R0FBQSxNQUVBLElBQUcsS0FBQSxLQUFTLE9BQVo7SUFDSCxjQUFBLEdBQWlCLE1BRGQ7R0FBQSxNQUVBLElBQUcsS0FBQSxLQUFTLE1BQVQsSUFBbUIsS0FBQSxLQUFTLFVBQS9CO0lBQ0gsY0FBQSxHQUFpQixPQURkO0dBQUEsTUFFQSxJQUFHLEtBQUEsS0FBUyxPQUFaO0lBQ0gsY0FBQSxHQUFpQixRQURkO0dBQUEsTUFFQSxJQUFHLEtBQUEsS0FBUyxPQUFULElBQW9CLEtBQUEsS0FBUyxPQUFoQztJQUNILGNBQUEsR0FBaUIsUUFEZDtHQUFBLE1BQUE7SUFHSCxjQUFBLEdBQWlCLElBQUMsQ0FBQSxTQUhmOztFQUtMLE9BQUEsR0FBVTtFQUNWLE9BQUEsR0FBVTtFQUNWLElBQUcsSUFBQyxDQUFBLE9BQUQsS0FBWSxJQUFmO0lBQ0UsT0FBQSxHQUFVLEdBQUEsR0FBTSxLQUFOLEdBQWMsS0FEMUI7O0VBRUEsSUFBRyxPQUFPLElBQVAsS0FBZSxRQUFsQjtJQUNFLE9BQUEsSUFBVyxHQUFBLEdBQU0sS0FEbkI7R0FBQSxNQUVLLElBQUcsSUFBQSxJQUFTLE9BQU8sSUFBUCxLQUFlLFFBQXhCLElBQXFDLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBWixDQUFpQixDQUFDLE1BQWxCLEdBQTJCLENBQW5FO0lBQ0gsT0FBQSxJQUFXLEdBQUEsR0FBTSxJQUFJLENBQUMsT0FBTCxDQUFhLElBQWIsRUFBbUIsS0FBbkIsRUFBMEIsSUFBMUIsRUFBZ0MsS0FBaEMsRUFEZDs7RUFFTCxPQUFBLEdBQVUsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IseUJBQWhCLEVBQTJDLEVBQTNDO0VBR1YsUUFBQSxHQUFXO0VBQ1gsU0FBQSxHQUFZLElBQUEsR0FBTyxPQUFPLENBQUM7QUFDM0IsU0FBTSxPQUFPLENBQUMsTUFBUixHQUFpQixTQUF2QjtJQUNFLFFBQVEsQ0FBQyxJQUFULENBQWMsT0FBQSxHQUFVLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQWxCLEVBQXFCLFNBQXJCLENBQXhCO0lBQ0EsT0FBQSxHQUFVLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFNBQWxCO0VBRlo7RUFHQSxRQUFRLENBQUMsSUFBVCxDQUFjLE9BQUEsR0FBVSxPQUF4QjtFQUNBLGFBQUEsR0FDRTtJQUFBLElBQUEsRUFBTSxJQUFOO0lBQ0EsR0FBQSxFQUFLLElBQUMsQ0FBQSxPQUROOztFQUVGLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBQyxDQUFBLFFBQWYsRUFBeUIsYUFBekIsRUFBd0MsSUFBQyxDQUFBLFFBQXpDO0VBQ0EsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsU0FBQyxPQUFEO1dBQ2YsS0FBSyxDQUFDLE1BQU4sQ0FBYSxjQUFiLEVBQTZCLE9BQTdCO0VBRGUsQ0FBakI7RUFFQSxLQUFLLENBQUMsUUFBTixDQUFBO0VBQ0EsSUFBQyxDQUFBLElBQUQsQ0FBTSxRQUFOO1NBQ0EsUUFBQSxDQUFTLElBQVQsRUFBZSxJQUFmO0FBaERpQjs7QUFrRG5CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLE9BQUEsR0FBVSIsInNvdXJjZXNDb250ZW50IjpbInBvc2l4ID0gcmVxdWlyZSAncG9zaXgnXG51dGlsID0gcmVxdWlyZSAndXRpbCdcbndpbnN0b24gPSByZXF1aXJlICd3aW5zdG9uJ1xuXG5TeXNsb2dQb3NpeCA9IHdpbnN0b24udHJhbnNwb3J0cy5TeXNsb2dQb3NpeCA9IChvcHRpb25zID0ge30pIC0+XG4gIEBuYW1lID0gJ1N5c2xvZ1Bvc2l4J1xuICBAbGV2ZWwgPSBvcHRpb25zLmxldmVsIG9yICdkZWJ1ZydcbiAgQGlkZW50aXR5ID0gb3B0aW9ucy5pZGVudGl0eSBvciBwcm9jZXNzLnRpdGxlXG4gIEBmYWNpbGl0eSA9IG9wdGlvbnMuZmFjaWxpdHkgb3IgJ2xvY2FsMCdcbiAgQHVubWFwcGVkID0gb3B0aW9ucy51bm1hcHBlZCBvciAnaW5mbydcbiAgQHNob3dQaWQgPSBpZiBvcHRpb25zLnNob3dQaWQgPT0gdW5kZWZpbmVkIHRoZW4gdHJ1ZSBlbHNlIG9wdGlvbnMuc2hvd1BpZFxuICBAc2hvd0x2bCA9IGlmIG9wdGlvbnMuc2hvd0x2bCA9PSB1bmRlZmluZWQgdGhlbiB0cnVlIGVsc2Ugb3B0aW9ucy5zaG93THZsXG5cbiNcbiMgSW5oZXJpdCBmcm9tIGB3aW5zdG9uLlRyYW5zcG9ydGAgc28geW91IGNhbiB0YWtlIGFkdmFudGFnZVxuIyBvZiB0aGUgYmFzZSBmdW5jdGlvbmFsaXR5IGFuZCBgLmhhbmRsZUV4Y2VwdGlvbnMoKWAuXG4jXG51dGlsLmluaGVyaXRzIFN5c2xvZ1Bvc2l4LCB3aW5zdG9uLlRyYW5zcG9ydFxuXG5TeXNsb2dQb3NpeDo6bG9nID0gKGxldmVsLCBtc2csIG1ldGEsIGNhbGxiYWNrKSAtPlxuICBpZiBAc2lsZW50XG4gICAgcmV0dXJuIGNhbGxiYWNrIG51bGwsIHRydWVcblxuICAjIG1hcCBjb21tb24gZGVidWcgbGV2ZWxzIHRvIHZhbGlkIHBvc2l4IHN5c2xvZyB2YWx1ZXNcbiAgc3lzbG9nU2V2ZXJpdHkgPSBsZXZlbFxuICBpZiBsZXZlbCA9PSAndHJhY2UnIG9yIGxldmVsID09ICdkZWJ1ZydcbiAgICBzeXNsb2dTZXZlcml0eSA9ICdkZWJ1ZydcbiAgZWxzZSBpZiBsZXZlbCA9PSAnbm90aWNlJ1xuICAgIHN5c2xvZ1NldmVyaXR5ID0gJ25vdGljZSdcbiAgZWxzZSBpZiBsZXZlbCA9PSAnd2Fybicgb3IgbGV2ZWwgPT0gJ3dhcm5pbmcnXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnd2FybmluZydcbiAgZWxzZSBpZiBsZXZlbCA9PSAnZXJyb3InXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnZXJyJ1xuICBlbHNlIGlmIGxldmVsID09ICdjcml0JyBvciBsZXZlbCA9PSAnY3JpdGljYWwnXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnY3JpdCdcbiAgZWxzZSBpZiBsZXZlbCA9PSAnYWxlcnQnXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnYWxlcnQnXG4gIGVsc2UgaWYgbGV2ZWwgPT0gJ2ZhdGFsJyBvciBsZXZlbCA9PSAnZW1lcmcnXG4gICAgc3lzbG9nU2V2ZXJpdHkgPSAnZW1lcmcnXG4gIGVsc2VcbiAgICBzeXNsb2dTZXZlcml0eSA9IEB1bm1hcHBlZFxuXG4gIG1lc3NhZ2UgPSBtc2dcbiAgcHJlcGVuZCA9ICcnXG4gIGlmIEBzaG93THZsID09IHRydWVcbiAgICBwcmVwZW5kID0gJ1snICsgbGV2ZWwgKyAnXSAnXG4gIGlmIHR5cGVvZiBtZXRhID09ICdzdHJpbmcnXG4gICAgbWVzc2FnZSArPSAnICcgKyBtZXRhXG4gIGVsc2UgaWYgbWV0YSBhbmQgdHlwZW9mIG1ldGEgPT0gJ29iamVjdCcgYW5kIE9iamVjdC5rZXlzKG1ldGEpLmxlbmd0aCA+IDBcbiAgICBtZXNzYWdlICs9ICcgJyArIHV0aWwuaW5zcGVjdChtZXRhLCBmYWxzZSwgbnVsbCwgZmFsc2UpXG4gIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoL1xcdTAwMWJcXFsoXFxkKyg7XFxkKykqKT9tL2csICcnKVxuXG4gICMgdHJ1bmNhdGUgbWVzc2FnZSB0byBhIG1heCBvZiAxMDI0IGJ5dGVzXG4gIG1lc3NhZ2VzID0gW11cbiAgbWF4TGVuZ3RoID0gMTAyNCAtIHByZXBlbmQubGVuZ3RoXG4gIHdoaWxlIG1lc3NhZ2UubGVuZ3RoID4gbWF4TGVuZ3RoXG4gICAgbWVzc2FnZXMucHVzaCBwcmVwZW5kICsgbWVzc2FnZS5zdWJzdHJpbmcoMCwgbWF4TGVuZ3RoKVxuICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnN1YnN0cmluZyhtYXhMZW5ndGgpXG4gIG1lc3NhZ2VzLnB1c2ggcHJlcGVuZCArIG1lc3NhZ2VcbiAgc3lzbG9nT3B0aW9ucyA9XG4gICAgY29uczogdHJ1ZVxuICAgIHBpZDogQHNob3dQaWRcbiAgcG9zaXgub3BlbmxvZyBAaWRlbnRpdHksIHN5c2xvZ09wdGlvbnMsIEBmYWNpbGl0eVxuICBtZXNzYWdlcy5mb3JFYWNoIChtZXNzYWdlKSAtPlxuICAgIHBvc2l4LnN5c2xvZyBzeXNsb2dTZXZlcml0eSwgbWVzc2FnZVxuICBwb3NpeC5jbG9zZWxvZygpXG4gIEBlbWl0ICdsb2dnZWQnXG4gIGNhbGxiYWNrIG51bGwsIHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU3lzbG9nUG9zaXhcbiJdfQ==
